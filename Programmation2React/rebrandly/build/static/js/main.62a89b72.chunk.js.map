{"version":3,"sources":["Components/Rebrandly.js","Components/App.js","serviceWorker.js","index.js"],"names":["Rebrandly","props","state","url","urlShortened","error","value","getUrl","bind","handleUrlChange","checkValidity","a","fetch","method","headers","body","JSON","stringify","destination","response","ok","json","jsonResponse","console","log","setState","shortUrl","Error","getData","e","this","target","document","getElementById","onSubmit","preventDefault","Container","Row","className","Col","xl","span","offset","lg","md","sm","xs","style","styleCol1","styleCol2","id","inputStyle","type","name","onChange","size","defaultValue","pattern","required","btnStyle","variant","onClick","styledDiv","React","Component","border","borderBottom","paddingTop","backgroundColor","borderTop","color","paddingBottom","paddingRight","paddingLeft","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.62a89b72.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport Container from 'react-bootstrap/Container';  \r\nimport Row from 'react-bootstrap/Row';  \r\nimport Col from 'react-bootstrap/Col';  \r\n\r\nexport class Rebrandly extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { url: 'https://' , urlShortened: '', error:false, value:'https://'}\r\n        this.getUrl=this.getUrl.bind(this);\r\n        this.handleUrlChange=this.handleUrlChange.bind(this);\r\n        this.checkValidity=this.checkValidity.bind(this);\r\n    }\r\n    \r\n    getUrl(){\r\n        const apiKey = \"eebefb2dbe8442d5befab99efb56486e\";         \r\n        const getData = async () => { \r\n           try{ \r\n              const response = await fetch('https://api.rebrandly.com/v1/links', { \r\n                 method:'POST', \r\n                 headers: { \r\n                                  'Content-Type': 'application/json', \r\n                                  'apikey': apiKey   \r\n                                 }, \r\n        \r\n                 body:JSON.stringify({destination:this.state.url}) \r\n               }); \r\n        \r\n              if(response.ok){ \r\n                 const jsonResponse = await response.json(); \r\n                 console.log(jsonResponse);\r\n                 this.setState({ urlShortened: jsonResponse.shortUrl }); \r\n                 return jsonResponse; \r\n        \r\n              } \r\n              this.setState({ error: true }); \r\n              throw new Error('Request failed!'); \r\n           } \r\n        \r\n           catch(error){ \r\n              console.log(error); \r\n           } \r\n        } \r\n        getData();\r\n    }\r\n\r\n    handleUrlChange(e){\r\n        this.setState({ url: e.target.value }); \r\n    }\r\n\r\n    checkValidity(){\r\n        if(document.getElementById('inputUrl').checkValidity()===true)\r\n        this.getUrl();\r\n    }\r\n\r\n\r\n    render() { \r\n        return (\r\n            <>\r\n          \r\n        <form onSubmit={e =>{e.preventDefault()}} >\r\n            <Container>\r\n                <Row  className='text-center mt-5'>\r\n                    <Col xl={{span: 6, offset: 3 }} lg={{span: 6, offset: 3 }} md={{span: 8, offset: 2 }} sm={{span: 10, offset: 1 }} xs=\"12\" style={styleCol1}>\r\n                        <h1><u>Rebrandly</u> URL shortener</h1>\r\n                    </Col>\r\n                </Row>\r\n                <Row className='text-center' >\r\n                    <Col xl={{span: 6, offset: 3 }} lg={{span: 6, offset: 3 }} md={{span: 8, offset: 2 }} sm={{span: 10, offset: 1 }} xs=\"12\" style={styleCol2} \r\n                    className='p-5'>\r\n                        \r\n                        <Row className='mb-3'>\r\n                            <Col>\r\n                                <h1>Enter a URL</h1>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className='mb-5'>\r\n                            <Col >\r\n                                <input id='inputUrl' style={inputStyle} type=\"url\" name=\"url\" onChange={this.handleUrlChange} \r\n                                size=\"30\" defaultValue={this.state.value} pattern=\"(([\\w]+:)?//)?(([\\d\\w]|%[a-fA-F\\d]{2,2})+(:([\\d\\w]|%[a-fA-f\\d]{2,2})+)?@)?([\\d\\w][-\\d\\w]{0,253}[\\d\\w]\\.)+[\\w]{2,4}(:[\\d]+)?(/([-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})*)*(\\?(&?([-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})=?)*)?(#([-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})*)?\"\r\n                                required />\r\n                            </Col>\r\n                        </Row >\r\n                        <Row className='mb-3'>\r\n                            <Col>\r\n                                <button type='submit'  style={btnStyle} variant=\"outline-primary\" onClick={this.checkValidity}>Shorten</button>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row >\r\n                            <Col>\r\n                                <div style={styledDiv}>\r\n                                    <p>Your shortened url is:</p>\r\n                                    <p>{this.state.urlShortened}</p>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </form>\r\n        </>\r\n        );\r\n    }\r\n}\r\n\r\nconst styleCol1={\r\n    border: '1px dashed black ', \r\n    borderBottom: '0',\r\n    paddingTop:'2rem'\r\n}\r\n\r\nconst styleCol2={\r\n    backgroundColor:'#0080FF',\r\n    border: '1px dashed black ', \r\n    borderTop: '0'\r\n}\r\n\r\nconst btnStyle={\r\n    backgroundColor:'transparent',\r\n    border: '1px solid black', \r\n    color: 'white',\r\n    paddingTop: '0.425rem',\r\n    paddingBottom: '0.425rem',\r\n    paddingRight: '1.250rem',\r\n    paddingLeft: '1.250rem',\r\n}\r\n \r\nconst styledDiv={\r\n    color: 'white',\r\n    paddingTop: '0.625rem',\r\n    paddingBottom: '1.625rem',\r\n    paddingRight: '1.250rem',\r\n    paddingLeft: '1.250rem',\r\n    border: '2px solid white', \r\n}\r\n\r\nconst inputStyle={\r\n    border: '1px solid black', \r\n    backgroundColor:'transparent',\r\n    color: 'white',\r\n}\r\n\r\n","import React from 'react';\nimport { Rebrandly } from './Rebrandly';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Rebrandly/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/Components/App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}