{"version":3,"sources":["Components/StarWars.js","Components/App.js","serviceWorker.js","index.js"],"names":["StarWarsApi","props","state","data","parametre","count","input","resultat","handleChange","bind","getCount","handleInputChange","chercheApi","fetch","response","json","this","setState","ok","Error","statusText","console","log","e","target","value","Object","keys","map","key","onSubmit","preventDefault","onChange","type","min","max","className","onClick","print","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uRAIaA,EAAb,kDACI,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CAACC,KAAO,GAAIC,UAAU,GAAIC,MAAM,EAAGC,MAAM,GAAIC,SAAS,IACnE,EAAKC,aAAa,EAAKA,aAAaC,KAAlB,gBAClB,EAAKC,SAAS,EAAKA,SAASD,KAAd,gBACd,EAAKE,kBAAkB,EAAKA,kBAAkBF,KAAvB,gBACvB,EAAKG,WAAW,EAAKA,WAAWH,KAAhB,gBAND,EADvB,2MAamCI,MAAM,0BAbzC,cAakBC,EAblB,gBAc+BA,EAASC,OAdxC,UAckBA,EAdlB,OAgBYC,KAAKC,SAAS,CAAEd,KAAMY,IACtBC,KAAKN,SAASK,EAAI,QAClBC,KAAKC,SAAS,CAAEb,UAAWW,EAAI,SAE1BD,EAASI,GApB1B,uBAqBsBC,MAAML,EAASM,YArBrC,0DAyBgBC,QAAQC,IAAR,MAzBhB,mJA8BiBC,GACTP,KAAKC,SAAS,CAAEb,UAAWmB,EAAEC,OAAOC,QACpCT,KAAKN,SAASa,EAAEC,OAAOC,SAhC/B,wEAmCmBF,GAnCnB,kGAqCmCV,MAAMU,GArCzC,cAqCkBT,EArClB,gBAsC+BA,EAASC,OAtCxC,UAsCkBA,EAtClB,OAuCYC,KAAKC,SAAS,CAAEZ,MAAOU,EAAI,QAEtBD,EAASI,GAzC1B,uBA0CsBC,MAAML,EAASM,YA1CrC,0DA8CgBC,QAAQC,IAAR,MA9ChB,yJAkDsBC,GACdP,KAAKC,SAAS,CAACX,MAAMiB,EAAEC,OAAOC,UAnDtC,8KAyDkCZ,MAAMG,KAAKd,MAAME,UAAUY,KAAKd,MAAMI,OAzDxE,cAyDiBQ,EAzDjB,gBA0D8BA,EAASC,OA1DvC,UA0DiBA,EA1DjB,OA2DWC,KAAKC,SAAS,CAAEV,SAAUQ,IAErBD,EAASI,GA7DzB,uBA8DuBC,MAAML,EAASM,YA9DtC,0DAkEiBC,QAAQC,IAAR,MAlEjB,8IAuEY,IAAD,OACH,OAAS,6BACL,4BACKI,OAAOC,KAAKX,KAAKd,MAAMK,UAAUqB,KAAI,SAAAC,GAAG,OACzC,wBAAIA,IAAKA,GAAMA,EAAf,MAAuB,EAAK3B,MAAMK,SAASsB,WA3E3D,+BAkFc,IAAD,OACL,OACI,oCACI,0BAAMC,SAAU,SAAAP,GAAMA,EAAEQ,mBACpB,4BAASC,SAAUhB,KAAKR,cACnBkB,OAAOC,KAAKX,KAAKd,MAAMC,MAAMyB,KAAI,SAAAC,GAAG,OACjC,4BAAQA,IAAKA,EAAKJ,MAAO,EAAKvB,MAAMC,KAAK0B,IAAOA,OAGxD,2BAAOI,KAAK,SAAUC,IAAI,IAAIC,IAAKnB,KAAKd,MAAMG,MAAO2B,SAAUhB,KAAKL,oBACpE,4BAAQsB,KAAK,GAAGG,UAAU,kBAAkBC,QAASrB,KAAKJ,YAA1D,gBAEJI,KAAKsB,aA9FrB,GAAiCC,IAAMC,WCMxBC,MANf,WACE,OACC,kBAAC,EAAD,OCMiBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,a","file":"static/js/main.b1412b4d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\n\r\nexport class StarWarsApi extends React.Component {\r\n    constructor(props) { \r\n        super(props); \r\n        this.state = {data : [], parametre:'', count:0, input:'', resultat:[] }; \r\n        this.handleChange=this.handleChange.bind(this);\r\n        this.getCount=this.getCount.bind(this);\r\n        this.handleInputChange=this.handleInputChange.bind(this);\r\n        this.chercheApi=this.chercheApi.bind(this);\r\n    } \r\n\r\n    async componentDidMount(){ \r\n        \r\n        try { \r\n            const response = await fetch('https://swapi.dev/api/'); \r\n            const json = await response.json(); \r\n            \r\n            this.setState({ data: json }); \r\n            this.getCount(json['people']);\r\n            this.setState({ parametre: json['people'] });\r\n        \r\n            if (!response.ok) { \r\n                throw Error(response.statusText); \r\n            } \r\n            \r\n        } catch (error) { \r\n                console.log(error); \r\n        }    \r\n        \r\n    }\r\n\r\n    handleChange(e){\r\n        this.setState({ parametre: e.target.value }); \r\n        this.getCount(e.target.value);\r\n    }\r\n\r\n    async getCount(e){\r\n        try { \r\n            const response = await fetch(e); \r\n            const json = await response.json(); \r\n            this.setState({ count: json['count'] }); \r\n           \r\n            if (!response.ok) { \r\n                throw Error(response.statusText); \r\n            } \r\n            \r\n        } catch (error) { \r\n                console.log(error); \r\n        }    \r\n    }s\r\n\r\n    handleInputChange(e){\r\n        this.setState({input:e.target.value})\r\n    }\r\n\r\n\r\n    async chercheApi(){\r\n        try { \r\n           const response = await fetch(this.state.parametre+this.state.input); \r\n           const json = await response.json(); \r\n           this.setState({ resultat: json }); \r\n           \r\n           if (!response.ok) { \r\n                 throw Error(response.statusText); \r\n          } \r\n            \r\n        } catch (error) { \r\n                 console.log(error); \r\n        }    \r\n\r\n    }\r\n\r\n    print(){\r\n        return ( <div> \r\n            <ul> \r\n                {Object.keys(this.state.resultat).map(key => ( \r\n                <li key={key}>{key} : {this.state.resultat[key]}</li> \r\n                ))} \r\n            </ul> \r\n        </div> \r\n    ); \r\n    }\r\n\r\n    render() { \r\n        return ( \r\n            <>\r\n                <form onSubmit={e => {e.preventDefault()}}>\r\n                    <select  onChange={this.handleChange}>\r\n                        {Object.keys(this.state.data).map(key => ( \r\n                            <option key={key} value={this.state.data[key]}>{key}</option>\r\n                        ))} \r\n                    </select>\r\n                    <input type=\"number\"  min=\"1\" max={this.state.count} onChange={this.handleInputChange}/>\r\n                    <button type=\"\" className=\"btn btn-primary\" onClick={this.chercheApi}>Cherche Api</button>\r\n                </form>\r\n               {this.print()}\r\n            </>\r\n        )\r\n    }\r\n   \r\n}\r\n \r\n","import React from 'react';\nimport './App.css';\nimport {StarWarsApi} from '../Components/StarWars'\n\nfunction App() {\n  return (\n   <StarWarsApi/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}