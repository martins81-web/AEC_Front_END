{"version":3,"sources":["Img/logo netflix.png","Img/MJ.jpg","Img/CB.jpg","Img/LB.jpg","Img/SP.jpg","Img/Magic.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","joueurs","random","Math","floor","PhotosJoueurs","imgMJ","imgLB","imgCB","imgMagic","imgSP","partants","map","element","key","toString","partantsAffiches","photo","id","src","alt","height","liste4Partants","nomJoueurAffiche","nomJoueur","App","texteAfficher","className","logoNetflix","onClick","document","getElementById","style","display","imgJ","nomJ","setAttribute","innerHTML","changeJoeur","type","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,+PCarCC,EAAU,CAAC,iBAAkB,aAAc,kBAAmB,gBAAiB,kBACjFC,EAAQC,KAAKC,MAAsB,EAAhBD,KAAKD,UACtBG,EAAe,CAACC,IAAMC,IAAMC,IAAMC,IAASC,KAE3CC,EAAWV,EAAQW,KAAI,SAAAC,GAAO,OAAI,wBAAIC,IAAKD,EAAQE,YAAaF,MAChEG,EAAkBf,EAAQW,KAAI,SAAAC,GAAO,OAAIZ,EAAQC,KAAYW,GAAW,wBAAIC,IAAKD,EAAQE,YAAjB,IAA+BF,MAEvGI,EACJ,yBACEC,GAAG,QACHC,IAAKd,EAAcH,GACnBkB,IAAKnB,EAAQC,GACbmB,OAAQ,MAGNC,EACN,yBAAKJ,GAAG,kBACN,yDACA,4BAAKF,IAIHO,EAAkBtB,EAAQC,GAC1BsB,EAAU,wBAAIN,GAAG,aAAaK,GAsCnBE,MApCf,WACE,IAAIC,EAAe,8CAEnB,OACE,yBAAKC,UAAU,OACZD,EACD,gDACA,yBAAKP,IAAKS,IAAaR,IAAI,OAAOC,OAAO,UACzC,iDACCG,EACAP,EACD,6CACA,wBAAIC,GAAG,kBAAkBP,GAExBW,EACD,4BAAQJ,GAAG,SAASW,QAAS,kBAMnC,WACEC,SAASC,eAAe,kBAAkBC,MAAMC,QAAU,OAC1D,IAAIC,EAAOJ,SAASC,eAAe,SAC/BI,EAAOL,SAASC,eAAe,aACnC7B,EAAQC,KAAKC,MAAsB,EAAhBD,KAAKD,UACxBgC,EAAKE,aAAa,MAAM/B,EAAcH,IACtCiC,EAAKE,UAAYpC,EAAQC,GAZcoC,IAAeC,KAAK,UAAvD,uBCzCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,EAAD,MACFhB,SAASC,eAAe,SD2HlB,kBAAmBgB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.10c28d44.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo netflix.73a72898.png\";","module.exports = __webpack_public_path__ + \"static/media/MJ.020b40e1.jpg\";","module.exports = __webpack_public_path__ + \"static/media/CB.d6ed768f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/LB.ecf87ecc.jpg\";","module.exports = __webpack_public_path__ + \"static/media/SP.9d3fd971.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Magic.edd29da3.jpg\";","import React from 'react';\nimport ReactDOM from 'react-dom'; \nimport './App.css';\nimport logoNetflix from './Img/logo netflix.png';\nimport imgMJ from './Img/MJ.jpg';\nimport imgCB from './Img/CB.jpg';\nimport imgLB from './Img/LB.jpg';\nimport imgSP from './Img/SP.jpg';\nimport imgMagic from './Img/Magic.jpg';\n\n\n\n\nconst joueurs = ['Michael Jordan', 'Larry Bird', 'Charles Barkley', 'Magic Johnson', 'Scottie Pippen'];\nlet random= Math.floor(Math.random() * 5); \nconst PhotosJoueurs= [imgMJ,imgLB,imgCB,imgMagic,imgSP];\n\nconst partants = joueurs.map(element => <li key={element.toString()}>{element}</li>);\nconst partantsAffiches =joueurs.map(element => joueurs[random] !== element && <li key={element.toString()}> {element}</li> );\n\nconst photo = (  \n  <img \n    id='photo'  \n    src={PhotosJoueurs[random]}\n    alt={joueurs[random]}       \n    height={350} />  \n); \n\nconst liste4Partants = (\n<div id=\"liste4Partants\">\n  <h3>Le 4 partants affich√©s</h3>\n  <ul>{partantsAffiches}</ul>\n</div>\n); \n\nvar nomJoueurAffiche= joueurs[random];\nvar nomJoueur=<h2 id='nomJoueur'>{nomJoueurAffiche}</h2>;\n\nfunction App() {\n  var texteAfficher=(<h1>THE LAST DANCE</h1>);\n  \n  return (\n    <div className=\"App\">\n      {texteAfficher}\n      <p>Une production de</p>\n      <img src={logoNetflix} alt=\"logo\" height=\"150px\" />\n      <p>Mettant en vedette</p>\n      {nomJoueur}     \n      {photo}\n      <h3>Le 5 partants</h3>\n      <ul id='liste5Partants'>{partants}</ul>\n      \n      {liste4Partants}\n      <button id='button' onClick={() => changeJoeur()} type=\"button\">Changer le joueur</button> \n    </div>\n  );\n}\n\n\nfunction changeJoeur(){\n  document.getElementById(\"liste4Partants\").style.display = \"none\"; \n  let imgJ = document.getElementById(\"photo\"); \n  let nomJ = document.getElementById(\"nomJoueur\"); \n  random= Math.floor(Math.random() * 5);\n  imgJ.setAttribute(\"src\",PhotosJoueurs[random]); \n  nomJ.innerHTML = joueurs[random]; \n}\n\n\n\n\n\n\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\ndocument.getElementById('root')\n);\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}