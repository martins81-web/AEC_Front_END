{"version":3,"sources":["Img/logo netflix.png","Img/MJ.jpg","Img/SK.jpg","Img/TK.jpg","Img/DR.jpg","Img/SP.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","joueurs","PhotosJoueurs","imgMJ","imgSK","imgTK","imgDR","imgSP","random","Math","floor","photo","id","src","alt","height","partants","map","joueur","i","key","partantsAffiches","liste4Partants","liste5Partants","nomJoueurAffiche","nomJoueur","changeJoeur","document","getElementById","style","display","imgJ","nomJ","norepeat","setAttribute","innerHTML","App","texteAfficher","className","logoNetflix","onClick","type","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,+PCSrCC,EAAU,CAAC,iBAAkB,aAAc,kBAAc,gBAAiB,kBAC1EC,EAAe,CAACC,IAAMC,IAAMC,IAAMC,IAAMC,KAC1CC,EAAQC,KAAKC,MAAsB,EAAhBD,KAAKD,UAEtBG,EACJ,yBACEC,GAAG,QACHC,IAAKX,EAAcM,GACnBM,IAAKb,EAAQO,GACbO,OAAQ,MAINC,EAAWf,EAAQgB,KAAI,SAACC,EAAOC,GAAR,OAAc,wBAAIC,IAAK,SAASD,GAAID,MAE3DG,EAAmBpB,EAAQgB,KAAI,SAACC,EAAOC,GAAR,OAAclB,EAAQO,KAAYU,GAAU,wBAAIE,IAAK,SAASD,GAAlB,IAAuBD,MAGlGI,EACN,yBAAKV,GAAG,kBACN,yDACA,4BAAKS,IAKDE,EACJ,yBAAKX,GAAG,kBACJ,6CACA,wBAAIA,GAAG,kBAAkBI,IAK3BQ,EAAkBvB,EAAQO,GAC1BiB,EAAU,wBAAIb,GAAG,aAAaY,GAqBlC,SAASE,IACPC,SAASC,eAAe,kBAAkBC,MAAMC,QAAU,OAC1D,IAAIC,EAAOJ,SAASC,eAAe,SAC/BI,EAAOL,SAASC,eAAe,aAE/BK,EAASzB,EAEb,IADAA,EAAQC,KAAKC,MAAsB,EAAhBD,KAAKD,UAClByB,IAAWzB,GACfA,EAAQC,KAAKC,MAAsB,EAAhBD,KAAKD,UAG1BuB,EAAKG,aAAa,MAAMhC,EAAcM,IAEtCwB,EAAKG,UAAYlC,EAAQO,GAGZ4B,MAnCf,WACE,IAAMC,EAAe,8CAErB,OACE,yBAAKC,UAAU,OACZD,EACD,gDACA,yBAAKxB,IAAK0B,IAAazB,IAAI,OAAOC,OAAO,UACzC,iDACCU,EACAd,EACAY,EACAD,EACD,4BAAQV,GAAG,SAAS4B,QAASd,EAAae,KAAK,UAA/C,uBC/CcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,EAAD,MACFrB,SAASC,eAAe,SD2HlB,kBAAmBqB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b69bc6e0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo netflix.73a72898.png\";","module.exports = __webpack_public_path__ + \"static/media/MJ.f93b60e4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/SK.8ae2e99f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/TK.3f53b0ef.jpg\";","module.exports = __webpack_public_path__ + \"static/media/DR.d65d4126.jpg\";","module.exports = __webpack_public_path__ + \"static/media/SP.59895fff.jpg\";","import React from 'react';\nimport './App.css';\nimport logoNetflix from './Img/logo netflix.png';\nimport imgMJ from './Img/MJ.jpg';\nimport imgSK from './Img/SK.jpg';\nimport imgTK from './Img/TK.jpg';\nimport imgDR from './Img/DR.jpg';\nimport imgSP from './Img/SP.jpg';\n\nconst joueurs = ['Michael Jordan', 'Steve Kerr', 'Toni Kukoč', 'Dennis Rodman', 'Scottie Pippen'];\nconst PhotosJoueurs= [imgMJ,imgSK,imgTK,imgDR,imgSP];\nlet random= Math.floor(Math.random() * 5); \n\nconst photo = (  \n  <img \n    id='photo'  \n    src={PhotosJoueurs[random]}\n    alt={joueurs[random]}       \n    height={350} />  \n); \n\n/* Crée la liste de joueurs MAP a faire afficher */ \nconst partants = joueurs.map((joueur,i) => <li key={'joueur'+i}>{joueur}</li>);\n/* Crée la liste de joueurs && a faire afficher */ \nconst partantsAffiches = joueurs.map((joueur,i) => joueurs[random] !== joueur && <li key={'joueur'+i}> {joueur}</li> );\n\n/* Crée l'element de joueurs a affiché */ \nconst liste4Partants = (\n<div id=\"liste4Partants\">\n  <h3>Le 4 partants affichés</h3>\n  <ul>{partantsAffiches}</ul>\n</div>\n);\n\n/* Crée l'element de joueurs a affiché' */ \nconst liste5Partants = (\n  <div id=\"liste5Partants\">\n      <h3>Le 5 partants</h3>\n      <ul id='liste5Partants'>{partants}</ul>\n  </div>\n); \n\n/* nom du joeur random */ \nvar nomJoueurAffiche= joueurs[random];\nvar nomJoueur=<h2 id='nomJoueur'>{nomJoueurAffiche}</h2>;\n\nfunction App() {\n  const texteAfficher=(<h1>THE LAST DANCE</h1>);\n  \n  return (\n    <div className=\"App\">\n      {texteAfficher}\n      <p>Une production de</p>\n      <img src={logoNetflix} alt=\"logo\" height=\"150px\" />\n      <p>Mettant en vedette</p>\n      {nomJoueur}     \n      {photo}\n      {liste5Partants}\n      {liste4Partants}\n      <button id='button' onClick={changeJoeur} type=\"button\">Changer le joueur</button> \n    </div>\n  );\n}\n\n\nfunction changeJoeur(){\n  document.getElementById(\"liste4Partants\").style.display = \"none\"; \n  let imgJ = document.getElementById(\"photo\"); \n  let nomJ = document.getElementById(\"nomJoueur\"); \n  /* Force le changement de joueur, no repeat */ \n  let norepeat=random;\n  random= Math.floor(Math.random() * 5);\n  while(norepeat===random){\n    random= Math.floor(Math.random() * 5);\n  }\n  /* Change la src de l'image pour le joueurs choisi aléatoirement */ \n  imgJ.setAttribute(\"src\",PhotosJoueurs[random]); \n  /* Change le nom du joueur choisi aléatoirement */ \n  nomJ.innerHTML = joueurs[random]; \n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\ndocument.getElementById('root')\n);\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}