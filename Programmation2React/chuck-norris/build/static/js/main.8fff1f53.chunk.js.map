{"version":3,"sources":["img/chuck-norris.jpg","Components/Norris.js","Components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Norris","props","state","categories","joke","category","name","showJoke","searchJoke","bind","handleCategoryChange","handleNameChange","fetch","response","json","console","log","this","setState","ok","Error","statusText","e","target","value","Card","Body","style","Text","className","Container","Row","Col","xs","sm","md","lg","xl","Image","src","alt","chuck","rounded","onChange","Object","keys","map","key","for","type","id","maxLength","onClick","React","Component","color","backgroundColor","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8fff1f53.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chuck-norris.5f03e784.jpg\";","import React from 'react';\r\nimport './App.css';\r\nimport Container from 'react-bootstrap/Container';  \r\nimport Row from 'react-bootstrap/Row';  \r\nimport Col from 'react-bootstrap/Col';  \r\nimport Card from 'react-bootstrap/Card';  \r\nimport Image from 'react-bootstrap/Image'; \r\nimport chuck from '../img/chuck-norris.jpg'\r\n\r\nexport class Norris extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {categories : [], joke:[], category: 'animal', name: '' ,showJoke:false}; \r\n\r\n        this.searchJoke=this.searchJoke.bind(this);\r\n        this.handleCategoryChange=this.handleCategoryChange.bind(this);\r\n        this.handleNameChange=this.handleNameChange.bind(this);\r\n    }\r\n\r\n    async componentDidMount(){ \r\n        \r\n        try { \r\n            const response = await fetch('https://api.chucknorris.io/jokes/categories'); \r\n            const json = await response.json(); \r\n            console.log(json);\r\n            this.setState({ categories: json }); \r\n            if (!response.ok) { \r\n                throw Error(response.statusText); \r\n            } \r\n            \r\n        } catch (error) { \r\n                console.log(error); \r\n        }    \r\n        \r\n    }\r\n\r\n    async searchJoke(){\r\n        \r\n        try { \r\n            const response = await fetch(\"https://api.chucknorris.io/jokes/random?category=\"+this.state.category+this.state.name)\r\n            const json = await response.json(); \r\n            console.log(json);\r\n            this.setState({ joke: json }); \r\n            this.setState({ showJoke: true }); \r\n            if (!response.ok) { \r\n                throw Error(response.statusText); \r\n            } \r\n            \r\n        } catch (error) { \r\n                console.log(error); \r\n        }    \r\n        \r\n    }\r\n\r\n    handleCategoryChange(e){\r\n        this.setState({ category: e.target.value }); \r\n    }\r\n\r\n    handleNameChange(e){\r\n        if (e.target.value!==''){\r\n            this.setState({ name: '&name='+e.target.value }); \r\n        }else{\r\n            this.setState({ name: '' });   \r\n        }\r\n    }\r\n\r\n    showJoke(){\r\n        if(this.state.showJoke)\r\n        return <>\r\n                    <Card >\r\n                        <Card.Body style={joke}>\r\n                            <Card.Text className='text-center'>\r\n                                {this.state.joke.value}\r\n                            </Card.Text>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </>\r\n    }\r\n\r\n    render() { \r\n        return (<Container >\r\n                <Row>\r\n                <Col xs='12' sm='12' md='12' lg=\"12\" xl='12' className='text-center my-4'>\r\n                    <Image src='https://fontmeme.com/permalink/200623/1f8144fe42413d4eaeed6efb8e8970a6.png' alt=\"lethal-weapon-font\" />                \r\n                </Col>\r\n                <Col xs='12' sm='12' md='12' lg=\"12\" xl='12' className='text-center mt-2 mb-3'>\r\n                    <Image src={chuck} rounded />\r\n                </Col>\r\n                <Col xs='12' sm='12' md='12' lg=\"12\" xl='12' className='text-center'>\r\n                    <div>\r\n                        Category: <select className='mr-5' onChange={this.handleCategoryChange}>\r\n                        \r\n                            {Object.keys(this.state.categories).map(key => ( \r\n                                <option key={key} value={this.state.categories[key]}>{this.state.categories[key]}</option>\r\n                            ))} \r\n                        </select> \r\n                        <label for=\"customName\" className='mr-2'>Custom Name: </label>\r\n                        <input type=\"text\" id='customName' maxLength=\"30\" onChange={this.handleNameChange}/>\r\n                        <button type=\"\" className=\"btn btn-outline-dark btn-sm ml-2\" onClick={this.searchJoke}>Show joke</button>\r\n                    </div>\r\n                </Col>\r\n        \r\n                <Col xs='12' sm='12' md='12' lg=\"12\" xl='12'>\r\n                   {this.showJoke()}\r\n                </Col>\r\n                </Row>\r\n            </Container>\r\n            );\r\n    }\r\n}\r\n \r\nconst joke={\r\n    color: 'white',\r\n    backgroundColor: 'black'\r\n}","import React from 'react';\nimport './App.css';\nimport {Norris} from './Norris'\n\nfunction App() {\n  return (\n    <Norris/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/Components/App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.min.css\";  \n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}