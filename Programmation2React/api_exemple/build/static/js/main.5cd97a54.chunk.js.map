{"version":3,"sources":["Components/PersonnageV4.js","Components/StarWars.js","Components/App.js","serviceWorker.js","index.js"],"names":["PersonnageV4","Col","xl","lg","md","sm","xs","className","Card","ListGroup","Object","keys","this","props","personnage","map","key","ListGroupItem","React","Component","StarWars","state","data","count","notFound","fetch","response","json","setState","ok","Error","statusText","console","log","i","person","push","Row","App","Container","fluid","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yUAQaA,EAAb,uKAGU,IAAD,OACT,OACQ,kBAACC,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,KAAKC,UAAU,QAC/C,kBAACC,EAAA,EAAD,CAAMD,UAAU,kBAEZ,kBAACE,EAAA,EAAD,CAAWF,UAAU,oBAChBG,OAAOC,KAAKC,KAAKC,MAAMC,YAAYC,KAAI,SAAAC,GAAG,OAC3C,kBAACC,EAAA,EAAD,CAAeD,IAAKA,GAApB,IAA0B,2BAAIA,EAAJ,MACjB,EAAKH,MAAMC,WAAWE,cAXnD,GAAkCE,IAAMC,W,QCD3BC,EAAb,kDAEI,WAAYP,GAAQ,IAAD,8BACf,cAAMA,IACDQ,MAAQ,CAACC,KAAO,GAAIC,MAAM,EAAGC,SAAS,GAF5B,EAFvB,iNAamCC,MAAM,iCAbzC,cAakBC,EAblB,gBAc+BA,EAASC,OAdxC,UAckBA,EAdlB,OAeYf,KAAKgB,SAAS,CAAEL,MAAOI,EAAI,QAEtBD,EAASG,GAjB1B,uBAkBsBC,MAAMJ,EAASK,YAlBrC,0DAsBgBC,QAAQC,IAAR,MAtBhB,QA4BYC,EAAE,EA5Bd,aA6BeA,GAAGtB,KAAKS,MAAME,MAAMX,KAAKS,MAAMG,UA7B9C,kCA+BgBU,IA/BhB,UAgCuCT,MAAM,gCAAgCS,GAhC7E,eAgCsBR,EAhCtB,iBAiCmCA,EAASC,OAjC5C,WAiCsBA,EAjCtB,OAmCgBf,KAAKgB,SAAS,CAAEN,KAAMK,IAEA,cAAjBA,EAAI,OACLQ,EAAOC,KAAKT,GACY,cAAjBA,EAAI,QACXf,KAAKgB,SAAS,CAAEJ,SAAUZ,KAAKS,MAAMG,SAAS,IAG7CE,EAASG,GA3C9B,uBA4C0BC,MAAMJ,EAASK,YA5CzC,2DAgDoBC,QAAQC,IAAR,MAhDpB,+KA4DQ,OAFAvB,OAAOC,KAAKwB,GAAQpB,KAAI,SAAAC,GAAG,OACvBgB,QAAQC,IAAIE,EAAOnB,OACf,kBAACqB,EAAA,EAAD,SAAQ3B,OAAOC,KAAKwB,GAAQpB,KAAI,SAAAC,GAAG,OAC/B,kBAAC,EAAD,CAAcA,IAAKA,EAAKF,WAAYqB,EAAOnB,aA7D/D,GAA8BE,IAAMC,WAmEhCgB,EAAO,G,QC7DIG,MARf,WACE,OACE,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACd,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.5cd97a54.chunk.js","sourcesContent":["import React from \"react\"; \r\nimport Col from 'react-bootstrap/Col'; \r\nimport Card  from 'react-bootstrap/Card'; \r\nimport ListGroup from 'react-bootstrap/ListGroup'; \r\nimport ListGroupItem from 'react-bootstrap/ListGroupItem'; \r\n// import chewie from '../img/Chewbacca_TLJ.png'\r\n\r\n\r\nexport class PersonnageV4 extends React.Component { \r\n\r\n\r\nrender() { \r\nreturn ( \r\n        <Col xl=\"2\" lg=\"3\" md=\"4\" sm=\"6\" xs=\"12\" className=' p-2'>\r\n            <Card className=\"h-100 bg-light\">\r\n                {/* <Card.Img variant=\"top\" src={chewie} /> */}\r\n                <ListGroup className=\"list-group-flush\">\r\n                    {Object.keys(this.props.personnage).map(key => ( \r\n                    <ListGroupItem key={key}> <b>{key}: </b> \r\n                            {this.props.personnage[key]}\r\n                    </ListGroupItem>  \r\n                    ))} \r\n                </ListGroup>\r\n            </Card>\r\n        </Col>\r\n    \r\n        ); \r\n    } \r\n} ","import React from \"react\"; \r\nimport {PersonnageV4} from './PersonnageV4'\r\nimport Row from 'react-bootstrap/Row'; \r\n\r\n\r\n\r\n\r\nexport class StarWars extends React.Component { \r\n\r\n    constructor(props) { \r\n        super(props); \r\n        this.state = {data : [], count:0, notFound:0 }; \r\n    } \r\n    \r\n     \r\n    //Ajout de la gestion des erreurs (Try/Catch) \r\n    async componentDidMount(){ \r\n  \r\n        //'get' count *nombre de personnages*\r\n        try { \r\n            const response = await fetch('https://swapi.dev/api/people/'); \r\n            const json = await response.json(); \r\n            this.setState({ count: json['count'] }); \r\n           \r\n            if (!response.ok) { \r\n                throw Error(response.statusText); \r\n            } \r\n            \r\n        } catch (error) { \r\n                console.log(error); \r\n        }    \r\n\r\n\r\n\r\n        //'get' personnages\r\n        var i=1;\r\n        while (i<=this.state.count+this.state.notFound){\r\n            try { \r\n                i++;\r\n                const response = await fetch('https://swapi.dev/api/people/'+i); \r\n                const json = await response.json(); \r\n            \r\n                this.setState({ data: json });\r\n                \r\n                if(!(json['detail']===\"Not found\")){\r\n                    person.push(json);\r\n                } else if (json['detail']===\"Not found\"){\r\n                    this.setState({ notFound: this.state.notFound+1 });\r\n                }\r\n\r\n                if (!response.ok) { \r\n                    throw Error(response.statusText); \r\n                } \r\n                \r\n            } catch (error) { \r\n                    console.log(error); \r\n            }  \r\n        }  \r\n        \r\n        \r\n        \r\n    } \r\n        \r\n\r\n    render() { \r\n        Object.keys(person).map(key => ( \r\n            console.log(person[key])))\r\n        return (<Row > {Object.keys(person).map(key => ( \r\n                    <PersonnageV4 key={key} personnage={person[key]} ></PersonnageV4>  \r\n            ))}</Row>) \r\n    }\r\n}\r\n\r\n\r\nvar person=[];","import React from 'react';\nimport '../Components/App.css';\nimport {StarWars} from './StarWars'\nimport Container from 'react-bootstrap/Container'; \n\nfunction App() {\n  return (\n    <Container fluid>\n      <StarWars/>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/Components/App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}